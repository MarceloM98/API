*métodos de requisições:

GET -> leitura
POST -> Criação
PUT -> Atualização
DELETE -> Deleção
PATCH -> Atualização parcial



*Route params

app.get("/message/:id", (request, response) => {}
  /message /: id, /: indica que o que vem depois da rota é um parâmetro. Esses valores são OBRIGATÓRIOS

request.params.id -> é o id da requisição
  usado para informações simples, como ID



*Query params

app.get("/user", (request, response) => {
  const { page, limit} = request.query

  response.send(`Página: ${page}. Mostrar: ${limit}`)
})
  Os valores não são obrigatórios, mas podem ser fornecidos diretamente no navegador pela estrutura: link/users?page=2&limit=10
  ? -> separador
  page/limit -> chaves
  = -> atribuir
  & -> segundo separador
  2/10 -> valores



app.get("/message/:id/:user", (request, response) => {
  const { id, user } = request.params;

  response.send(`
    Mensagem ID: ${id}.
    Para o usuário: ${user}.
  `);
});

app.get("/user", (request, response) => {
  const { page, limit } = request.query;

  response.send(`Página: ${page}. Mostrar: ${limit}`);
});



status code é opcional.

*Middleware

fica entre o request e a função destino.
são funções que tem acesso ao objeto solicitação e ao objeto resposta e a proxima função middleware.
a proxima função middleware é comumente chamada next

  Podem executar qualquer código
  fazer mudanças nos objetos de solicitação e resposta.
  encerrar o ciclo de solicitação-resposta.
  chamar o próximo middleware na pilha